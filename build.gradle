buildscript {
    ext {
        springBootVersion = "3.4.0"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "application"

wrapper { gradleVersion = "8.8" }

group = "com.webber"
version = "0.1.3"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
	implementation "org.springframework.cloud:spring-cloud-context:4.1.1"
	implementation "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
	implementation "io.jsonwebtoken:jjwt-api:0.12.3"
	implementation "io.jsonwebtoken:jjwt-impl:0.12.3"
	implementation "io.jsonwebtoken:jjwt-jackson:0.12.3"
	implementation "jakarta.validation:jakarta.validation-api:3.0.1"

    implementation "org.apache.commons:commons-lang3:3.17.0"
    implementation "commons-io:commons-io:2.18.0"
    implementation "org.projectlombok:lombok:1.18.36"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"
    annotationProcessor "org.projectlombok:lombok:1.18.36"

    runtimeOnly "org.mariadb.jdbc:mariadb-java-client"
    runtimeOnly "org.glassfish.jaxb:jaxb-runtime:4.0.5"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "com.h2database:h2"

}

tasks.named("test") {
	useJUnitPlatform()
}

repositories {
    mavenCentral()
}

def getVersionName = { ->
    def versionFile = file('version.properties')
    def props = new Properties()

    if (versionFile.exists()) {
        props.load(new FileInputStream(versionFile))
    } else {
        props['major'] = '1'
        props['minor'] = '0'
        props['patch'] = '0'
        props['build'] = '0'
    }

    return "${props.major}.${props.minor}.${props.patch}-${props.build}"
}

def incrementVersion = { ->
    def versionFile = file('version.properties')
    def props = new Properties()

    if (versionFile.exists()) {
        props.load(new FileInputStream(versionFile))
    } else {
        props['major'] = '1'
        props['minor'] = '0'
        props['patch'] = '0'
        props['build'] = '0'
    }

    // Increment build number
    def build = props['build'] as int
    props['build'] = (build + 1).toString()

    // Save updated properties
    def writer = new FileWriter(versionFile)
    props.store(writer, null)

    return "${props.major}.${props.minor}.${props.patch}-${props.build}"
}

// Only increment version when running in CI environment
if (System.getenv('CI')) {
    version = incrementVersion()
} else {
    version = getVersionName()
}

